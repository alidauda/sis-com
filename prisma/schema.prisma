// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RoleTypes {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         RoleTypes  @default(USER)
  cart          CartItem[]
  orders        Order?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String       @id @default(cuid())
  name        String
  price       String
  description String       @db.Text
  image       String
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  quantity    String
  cart        CartItem[]
  OrderItems  OrderItems[]
}

model CartItem {
  id String @id @default(cuid())

  quantity  Int
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Order {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  address       String       @db.Text
  name          String
  phoneNumber   String
  state         String
  totalAmount   Int
  totalQuantity Int
  status        OrderStatus  @default(PENDING)
  OrderItems    OrderItems[]

  @@index([userId])
}

model OrderItems {
  id        String  @id @default(cuid())
  quantity  Int
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([orderId])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
